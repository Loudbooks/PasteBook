services:
  backend:
    image: ghcr.io/loudbooks/pastebook-backend:latest
    container_name: pastebook-backend
    restart: always
    environment:
      - POSTGRES_URI=postgres://postgres:postgres@postgres:5432/pastebook
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - pastebook-network

  frontend:
    image: ghcr.io/loudbooks/pastebook-frontend:latest
    container_name: pastebook-frontend
    restart: always
    environment:
      - TITLE=${TITLE}
      - DESCRIPTION=${DESCRIPTION}
      - DISABLE_NEW=${DISABLE_NEW}
      - FAVICON_URL=${FAVICON_URL}
      - MAX_PAYLOAD_SIZE=${MAX_PAYLOAD_SIZE}
      - BACKEND_PORT=${BACKEND_PORT}
    depends_on:
      - backend
    networks:
      - pastebook-network
    pull_policy: always

  nginx:
    image: ghcr.io/loudbooks/pastebook-nginx:latest
    container_name: pastebook-nginx
    depends_on:
      - backend
      - frontend
    ports:
      - '${PORT:-8080}:80'
    networks:
      - pastebook-network
    
  postgres:
    image: postgres:latest
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=pastebook
    networks:
      - pastebook-network
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      
volumes:
  postgres-data-data:

networks:
  pastebook-network:
    driver: bridge
